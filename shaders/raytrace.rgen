#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#include "raycommon.glsl"
#include "wavefront.glsl"
#include "random.glsl"

#define M_PI 3.1415926535897932384626433832795
#define SIZE_LIGHT_RANDOM 10000
#define SIZE_TRI_RANDOM 10000

layout(push_constant) uniform PushConstant { pushConstant pushC; };

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;


layout(binding = 1, set = 1, std140) buffer Vertices { Vertex v[]; } vertices[];
layout(binding = 2, set = 1) buffer Indices { uint i[]; } indices[];
layout(binding = 3, set = 1, std430) buffer Materials { Material mats[]; };
layout(binding = 4, set = 1, std140) buffer Instances { InstanceInfo instanceInfos[]; };
layout(binding = 5, set = 1, std140) buffer LightsBuffer { int lightCount; Light lights[]; };
layout(binding = 6, set = 1, std430) buffer LightSamplerBuffer {
    int randomLigthIndex[SIZE_LIGHT_RANDOM];
    FaceSample randomTriIndex[][SIZE_TRI_RANDOM]; // access index is the one returned from randomLightIndex, as point lights come after area lights
};

layout(binding = 7, set = 1) uniform sampler2D textureSamplers[];
layout(binding = 8, set = 1, rgba32f) uniform image2D accumulateImage;


layout(binding = 0, set = 1) uniform CameraMatrices {
        mat4 view;
        mat4 proj;
        mat4 viewInverse;
        mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT hitInfo info;
layout(location = 1) rayPayloadEXT shadowCheck shadowInfo;

uint seed;

// Random float [-1, 1)
float getRandomNegPos() {
    return rnd(seed) * 2 - 1;
}

// Random int [0, max]
int getRandomInteger(int max) {
    return int(rnd(seed) * (max + 1));
}

// https://math.stackexchange.com/a/1163278
vec3 randomOnUnitSphere() {
    vec3 res;
    do {
        res = vec3(rnd(seed), rnd(seed), rnd(seed));
    } while (length(res) > 1);

    res = normalize(res);
    return res;
}

vec3 randomInHemisphere(vec3 normal) {
    vec3 res;
    do {
        res = vec3(getRandomNegPos(), getRandomNegPos(), getRandomNegPos());
    } while (length(res) > 1);

    res = normalize(res);

    if (dot(normal, res) < 0) {
        res = res - normal * 2 * dot(normal, res);
    }
    return res;
}

vec3 randomInHemisphereCosine(vec3 normal) {
    vec3 res;

    float r1 = rnd(seed);
    float r2 = rnd(seed);
    float r3 = rnd(seed);

    float a = 1 - 2 * r1;
    float b = sqrt(1- a * a);
    float phi = 2 * M_PI * r2;
    res.x = r1 + b * cos(phi);
    res.y = r1 + b * sin(phi);
    res.z = r3 + a;

    return normalize(res);
}

// Rendering Vorlesung - Nori src/common.cpp
float fresnel(in float eta, in float cosThetaI) {
    float sinThetaSqr = eta * eta * (1- cosThetaI * cosThetaI);

    if (sinThetaSqr > 1.0f) {
        return 1.0f; // Total internal reflection
    }

    float cosThetaT = sqrt(1.0f - sinThetaSqr);

    float Rs = (eta * cosThetaI - cosThetaT)
               / (eta * cosThetaI + cosThetaT);
    float Rp = (cosThetaI - eta * cosThetaT)
               / (cosThetaI + eta * cosThetaT);

    return (Rs * Rs + Rp * Rp) / 2.0f;
}

vec3 phong(in Material mat, in vec2 uv, in vec3 normal, in vec3 direction, in vec3 directionNew) {
    vec3 res = vec3(0.0, 0.0, 0.0);

    float dotNewNormal = dot(directionNew, normal);
    if (dotNewNormal > 0) {
        if (mat.textureIdDiffuse != -1) {
            res += mat.diffuse  * dotNewNormal * texture(textureSamplers[mat.textureIdDiffuse], info.textureUV).xyz / M_PI;
        } else {
            res += mat.diffuse * dotNewNormal / M_PI;
        }

        float dotReflDir = dot(reflect(-directionNew, normal), direction);
        if (dotReflDir > 0) {
            if (mat.textureIdSpecular != -1) {
                res += mat.specular * pow(dotReflDir, mat.specularHighlight) * texture(textureSamplers[mat.textureIdSpecular], info.textureUV).xyz / M_PI;
            } else {
                res += mat.specular * pow(dotReflDir, mat.specularHighlight) / M_PI;
            }
        }

    }

    return res;
}

void main()
{
    // Init seed
    seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pushC.randomUInt);

    vec3 result = vec3(0.0, 0.0, 0.0);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

    const uint  rayFlags = 0;
    const uint  shadowRayFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    const float tMin     = 0.001;
    const float tMax     = 10000.0;


    const int samplesPerPixel = pushC.samplesPerPixel;
    const int maxDepth = pushC.maxDepth;

    for (int iSample = 0; iSample < samplesPerPixel; ++iSample) {
        vec3 sampleResult = vec3(0.0, 0.0, 0.0);
        vec3 throughput = vec3(1.0, 1.0, 1.0);

        vec2 inUV = (pixelCenter + vec2(getRandomNegPos(), getRandomNegPos()) / 2.0) / vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;

        vec3 origin    = (cam.viewInverse * vec4(0, 0, 0, 1)).xyz;
        vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
        vec3 direction = (cam.viewInverse * vec4(normalize(target.xyz), 0)).xyz;


        bool addDirectLightHits = true;

        for (int iDepth = 0; iDepth < maxDepth; ++iDepth) {
            traceRayEXT(topLevelAS,     // acceleration structure
                        rayFlags,       // rayFlags
                        0xFF,           // cullMask
                        0,              // sbtRecordOffset
                        0,              // sbtRecordStride
                        0,              // missIndex
                        origin.xyz,     // ray origin
                        tMin,           // ray min range
                        direction.xyz,  // ray direction
                        tMax,           // ray max range
                        0               // payload (location = 0)
            );
            // Directional light / skybox
            if (info.isLight) {
                sampleResult += throughput * info.lightColor;
                break;
            }

            origin = info.worldPos;

            bool frontFace = true;
            if (dot(direction, info.normal) > 0.0) {
                info.normal = -info.normal;
                frontFace = false;
            }

            Material mat = mats[info.matIndex];

            switch (mat.type) {
                case 3: // Light
                    if (pushC.enableNEE && addDirectLightHits) {
                        sampleResult += 0.5 * throughput * mat.lightColor;
                    } else {
                        sampleResult += throughput * mat.lightColor;
                    }
                    // Then continue as diffuse
                case 0: // Diffuse
                case 4: // Phong

                    if (pushC.enableNEE && lightCount > 0) {
                        // Next event estimation
                        // Sample random light

                        // A single light should not interact with itself
                        if (mat.type == 3 && lightCount == 1) {
                            break;
                        }

                        int iRandomLight;
                        int iLight;
                        Light light;

                        // Don't let light contribute to itself
                        do {
                            iRandomLight = getRandomInteger(SIZE_LIGHT_RANDOM - 1);
                            iLight = randomLigthIndex[iRandomLight];
                            light = lights[iLight];
                        } while (light.instanceIndex == info.instanceIndex && !light.isPointLight);


                        vec3 lightColor;
                        vec3 lightDir;
                        float lightDistance;
                        float pdf;
                        float cosThetaLight;
                        if (light.isPointLight) {
                            vec3 toLight = light.pos - origin;
                            lightDistance = length(toLight);
                            lightDir = toLight / lightDistance;

                            pdf = light.sampleProb;
                            lightColor = light.color /  (lightDistance * lightDistance);
                        } else {
                            int iModel = instanceInfos[light.instanceIndex].modelIndex;
                            mat4 transform = instanceInfos[light.instanceIndex].transform;
                            mat4 normalTransform = instanceInfos[light.instanceIndex].normalTransform;

                            int iRandomTri = getRandomInteger(SIZE_TRI_RANDOM - 1);
                            FaceSample triSample = randomTriIndex[iLight][iRandomTri];

                            int iTri = triSample.index;

                            ivec3 ind = ivec3(indices[iModel].i[3 * iTri + 0],   //
                                              indices[iModel].i[3 * iTri + 1],   //
                                              indices[iModel].i[3 * iTri + 2]);  //

                            // Vertex of the triangle
                            Vertex v0 = vertices[iModel].v[ind.x];
                            Vertex v1 = vertices[iModel].v[ind.y];
                            Vertex v2 = vertices[iModel].v[ind.z];

                            // Uniform random point on triangle
                            vec2 randomXY = vec2(rnd(seed), rnd(seed));
                            float sqrtx = sqrt(randomXY.x);
                            float sqrty = sqrt(randomXY.y);
                            vec3 barycentrics = vec3(1.0 - sqrtx, sqrtx * (1.0 - randomXY.y), randomXY.y * sqrtx);

                            // Computing the coordinates of the hit position
                            vec3 lightSampleWorldPos = v0.pos * barycentrics.x + v1.pos * barycentrics.y + v2.pos * barycentrics.z;
                            vec3 lightSampleNormal = v0.normal * barycentrics.x + v1.normal * barycentrics.y + v2.normal * barycentrics.z;
                            // Transforming the position and normal to world space
                            lightSampleWorldPos = (transform * vec4(lightSampleWorldPos, 1.0)).xyz;
                            lightSampleNormal= (normalTransform * vec4(lightSampleNormal, 0.0)).xyz;

                            vec3 toLight = lightSampleWorldPos - origin;
                            lightDistance = length(toLight);
                            lightDir = toLight / lightDistance;

                            lightColor = mats[v0.materialIndex].lightColor;

                            cosThetaLight = dot(-lightDir, lightSampleNormal);

                            pdf = light.sampleProb * triSample.sampleProb / triSample.faceArea * lightDistance * lightDistance / cosThetaLight;
                        }

                        shadowInfo.isShadowed = true;
                        if (dot(lightDir, info.normal) > 0) {
                            traceRayEXT(topLevelAS,     // acceleration structure
                                        shadowRayFlags,       // rayFlags
                                        0xFF,           // cullMask
                                        0,              // sbtRecordOffset
                                        0,              // sbtRecordStride
                                        1,              // missIndex of shadow miss
                                        origin.xyz,     // ray origin
                                        tMin,           // ray min range
                                        lightDir,  // ray direction
                                        lightDistance - 0.0001,           // ray max range
                                        1               // payload (location = 1)
                            );
                        }

                        if (!shadowInfo.isShadowed) {
                            sampleResult += 0.5 * throughput * phong(mat, info.textureUV, info.normal, -direction, lightDir)
                                    * lightColor / pdf;
                        }
                    }


                    vec3 newDirection = randomInHemisphere(info.normal);

                    float p = 1 / (2 * M_PI);
                    throughput *= phong(mat, info.textureUV, info.normal, -direction, newDirection) / p;

                    direction = newDirection;
                    addDirectLightHits = false;
                    break;
                case 1: // Specular
                {
                    throughput *= mat.specular;

                    direction = reflect(direction, info.normal);
                    addDirectLightHits = true;
                    break;
                }

                case 2: // Transparent
                {
                    throughput *= mat.specular;

                    float eta = mat.refractionIndexInv;

                    if (!frontFace) {
                        eta = mat.refractionIndex;
                    }
                    float cosTheta = dot(-direction, info.normal);
                    float fresnel = fresnel(eta, cosTheta);

                    if (rnd(seed) > fresnel) {
                        // Refract
                        direction = refract(direction, info.normal, eta);
                    } else {
                        // Reflect
                        direction = reflect(direction, info.normal);
                    }

                    addDirectLightHits = true;
                    break;
                }
            }

            if (pushC.enableRR && iDepth > 5) {
                float p = (throughput.x + throughput.y + throughput.z) / 3.0;
                // Russian roulette
                if (rnd(seed) > p) {
                    break;
                } else {
                    throughput *= 1.0 / p;
                }
            }
        }

        result += sampleResult / samplesPerPixel;
    }

    ivec2 imageUV = ivec2(gl_LaunchIDEXT.xy);

    // if the camera hasn't changed, then accumulate results
    if (pushC.previousFrames > 0) {
        vec3 accumulated = imageLoad(accumulateImage, imageUV).xyz;
        accumulated += result;

        imageStore(image, imageUV, vec4(accumulated / (pushC.previousFrames + 1), 1.0));
        imageStore(accumulateImage, imageUV, vec4(accumulated, 1.0));
    } else {
        imageStore(accumulateImage, imageUV, vec4(result, 1.0));
        imageStore(image, imageUV, vec4(result, 1.0));
    }
}