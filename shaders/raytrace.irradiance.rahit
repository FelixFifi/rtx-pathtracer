#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "wavefront.glsl"
#include "raycommon.glsl"

//@formatter:off
layout(push_constant) uniform PushConstant{ pushConstant pushC; };

layout(location = 3) rayPayloadInEXT cacheHits cacheInfo;
layout(binding = 12, set = 1, std430) buffer Spheres { sphere cacheSpheres[]; };
layout(binding = 13, set = 1, scalar) buffer Cache {  cacheHeader header; cacheData cache[]; };
//@formatter:on

float irradianceWeight(vec3 p, vec3 n, uint iIrradiance) {
    return 1.0 / (length(p - cacheSpheres[iIrradiance].center) / cache[iIrradiance].harmonicR
    + sqrt(1 - dot(n, cache[iIrradiance].normal)));
}

bool visibilityCheck(vec3 p, vec3 n, uint iIrradiance) {
    return -0.001 <= dot(p - cacheSpheres[iIrradiance].center, (n + cache[iIrradiance].normal) / 2.0);
}

void main() {
    float weight = irradianceWeight(cacheInfo.origin, cacheInfo.normal, gl_PrimitiveID);

    if (isnan(weight) || isinf(weight)) {
        weight = 1000000;
    }

    if (weight <= 1.0 / pushC.irradianceA || !visibilityCheck(cacheInfo.origin, cacheInfo.normal, gl_PrimitiveID)) {
        return;
    }

    if (pushC.useIrradianceGradients) {
        float E = length(cache[gl_PrimitiveID].color);
        vec3 color = E != 0 ? normalize(cache[gl_PrimitiveID].color) : vec3(0,0,0);

        vec3 adjustedColor = color * (E
            + dot(cross(cache[gl_PrimitiveID].normal, cacheInfo.normal), cache[gl_PrimitiveID].rotGrad)
            + dot(cacheInfo.origin - cacheSpheres[gl_PrimitiveID].center, cache[gl_PrimitiveID].transGrad));
        cacheInfo.cacheValueSum += weight * adjustedColor;
    } else {
        cacheInfo.cacheValueSum += weight * cache[gl_PrimitiveID].color;
    }

    cacheInfo.totalWeight += weight;
}